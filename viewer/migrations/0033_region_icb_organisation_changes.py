# Generated by Django 5.2.6 on 2025-09-23 14:30

from django.db import migrations, models
import django.db.models.deletion


def migrate_region_icb_data(apps, schema_editor):
    """
    Migrate existing region and ICB string data to new Region and ICB models
    """
    Organisation = apps.get_model('viewer', 'Organisation')
    Region = apps.get_model('viewer', 'Region')
    ICB = apps.get_model('viewer', 'ICB')
    
    # Get unique regions and ICBs from existing organisation data
    orgs = Organisation.objects.all()
    
    # Create Region objects from unique region names
    unique_regions = {}
    for org in orgs:
        if org.region and org.region not in unique_regions:
            unique_regions[org.region] = org.region
    
    region_objects = []
    for region_name in unique_regions.values():
        if region_name:  # Skip empty strings
            # Create a simple code from the name for now - to be updated
            region_code = region_name.replace(' ', '_').upper()[:20]
            region_objects.append(Region(code=region_code, name=region_name))
    
    Region.objects.bulk_create(region_objects, ignore_conflicts=True)
    
    # Create ICB objects from unique ICB names
    unique_icbs = {}
    for org in orgs:
        if org.icb and org.region:
            key = (org.icb, org.region)
            if key not in unique_icbs:
                unique_icbs[key] = {'icb_name': org.icb, 'region_name': org.region}
    
    region_lookup = {region.name: region for region in Region.objects.all()}
    
    icb_objects = []
    for icb_data in unique_icbs.values():
        icb_name = icb_data['icb_name']
        region_name = icb_data['region_name']
        region = region_lookup.get(region_name)
        
        if icb_name and region:
            # Create a simple code from the name for now - to be updated
            icb_code = icb_name.replace(' ', '_').upper()[:20]
            icb_objects.append(ICB(code=icb_code, name=icb_name, region=region))
    
    ICB.objects.bulk_create(icb_objects, ignore_conflicts=True)
    
    # Update organisations to use the new ForeignKey relationships
    icb_lookup = {(icb.name, icb.region.name): icb for icb in ICB.objects.select_related('region')}
    
    for org in orgs:
        if org.region:
            region = region_lookup.get(org.region)
            if region:
                org.trust_region = region
        
        if org.icb and org.region:
            icb = icb_lookup.get((org.icb, org.region))
            if icb:
                org.trust_icb = icb
        
        org.save()


def reverse_migrate_region_icb_data(apps, schema_editor):
    """
    Reverse migration: populate string fields from ForeignKey relationships
    """
    Organisation = apps.get_model('viewer', 'Organisation')
    
    for org in Organisation.objects.select_related('trust_region', 'trust_icb'):
        if org.trust_region:
            org.region = org.trust_region.name
        if org.trust_icb:
            org.icb = org.trust_icb.name
        org.save()


class Migration(migrations.Migration):

    dependencies = [
        ('viewer', '0032_trusttype_organisation_trust_type'),
    ]

    operations = [
        # Create Region model
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Region code', max_length=20, unique=True)),
                ('name', models.CharField(help_text='Region name', max_length=255)),
            ],
            options={
                'indexes': [
                    models.Index(fields=['code'], name='viewer_region_code_idx'),
                    models.Index(fields=['name'], name='viewer_region_name_idx'),
                ],
            },
        ),
        
        # Create ICB model
        migrations.CreateModel(
            name='ICB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ICB code', max_length=20, unique=True)),
                ('name', models.CharField(help_text='ICB name', max_length=255)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='icbs', to='viewer.region')),
            ],
            options={
                'indexes': [
                    models.Index(fields=['code'], name='viewer_icb_code_idx'),
                    models.Index(fields=['name'], name='viewer_icb_name_idx'),
                    models.Index(fields=['region'], name='viewer_icb_region_idx'),
                ],
            },
        ),
        
        # Add new ForeignKey fields to Organisation (temporarily nullable)
        migrations.AddField(
            model_name='organisation',
            name='trust_region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temp_organisations', to='viewer.region'),
        ),
        migrations.AddField(
            model_name='organisation',
            name='trust_icb',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temp_organisations', to='viewer.icb'),
        ),
        
        # Migrate the data
        migrations.RunPython(
            migrate_region_icb_data,
            reverse_migrate_region_icb_data,
        ),
        
        # Remove the old CharField fields
        migrations.RemoveField(
            model_name='organisation',
            name='region',
        ),
        migrations.RemoveField(
            model_name='organisation',
            name='icb',
        ),
        
        # Rename the new fields to the correct names and update related_name
        migrations.RenameField(
            model_name='organisation',
            old_name='trust_region',
            new_name='region',
        ),
        migrations.RenameField(
            model_name='organisation',
            old_name='trust_icb',
            new_name='icb',
        ),
    ]
